From 2e85f069df7ce0d2ce2d6f1d5d4e2c9a69685050 Mon Sep 17 00:00:00 2001
From: James Jones <atari@theinnocuous.com>
Date: Sat, 18 Apr 2020 02:45:06 -0700
Subject: [PATCH] Add Alcyon object file support

Support ingesting the Atari ST/TOS/GEMDOS "Alcyon"
object file format in addition to a.out object
files.  The load file routine simply translates
the alcyon object file into a a.out file before
passing it on to the existing processing workflow.

The motivation here was to enable linking of the
binary-only cinepak decompression GPU routines
provided in the developer files.  ALN can handle
these files just fine, and now RLN can too.
---
 rln.c | 180 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 rln.h |  40 +++++++++++++
 2 files changed, 220 insertions(+)

diff --git a/rln.c b/rln.c
index a0b5ab0..a369b50 100644
--- a/rln.c
+++ b/rln.c
@@ -2367,6 +2367,179 @@ int LoadObject(char * fname, int fd, char * ptr)
 	return AddToProcessingList(ptr, fname, nullStr, 0, tSize, dSize, bSize);
 }
 
+// XXX Need to pass value in/modify value here to generate "common" symbols?
+static uint32_t SymTypeAlcToAout(uint32_t alcType)
+{
+	uint32_t type = 0;
+
+	// XXX Is this correct?
+	if (!(alcType & ALCSYM_DEFINED))
+		type |= T_UNDF;
+
+	if (alcType & ALCSYM_EQUATED)
+		type |= T_ABS;
+
+	if (alcType & ALCSYM_GLOBAL)
+		type |= T_GLBL;
+
+	// XXX Is this correct?
+	if (alcType & ALCSYM_EQUATED_REG)
+		type |= T_ABS;
+
+	// XXX Is this correct?
+	if (alcType & ALCSYM_EXTERN)
+		type |= T_UNDF;
+
+	if (alcType & ALCSYM_DRELOC)
+		type |= T_DATA;
+
+	if (alcType & ALCSYM_TRELOC)
+		type |= T_TEXT;
+
+	if (alcType & ALCSYM_BRELOC)
+		type |= T_BSS;
+
+	return type;
+}
+
+int LoadAlcyon(char * fname, int fd)
+{
+	char *ptr, *sptr, *aout, *saout, *strPtr;
+	struct ALCHEADER hdr;
+	struct ALCSYM *alcSyms;
+	long size = FileSize(fd);
+	size_t symStrLen;
+	size_t strOff;
+	int numSyms;
+	int i, j;
+
+	// Allocate memory for file data
+	ptr = malloc(size);
+
+	if (ptr == NULL)
+	{
+		printf("Out of memory while processing %s\n", fname);
+		close(fd);
+		return 1;
+	}
+
+	// Read in file data
+	if (read(fd, ptr, size) != size)
+	{
+		printf("File read error on %s\n", fname);
+		close(fd);
+		free(ptr);
+		return 1;
+	}
+
+	close(fd);
+
+	hdr.magic = GetWord(ptr);
+	hdr.tsize = GetLong(ptr + 2);
+	hdr.dsize = GetLong(ptr + 6);
+	hdr.bsize = GetLong(ptr + 10);
+	hdr.ssize = GetLong(ptr + 14);
+
+	// Construct a BSD-style/aout object file in memory from the Alcyon data
+	numSyms = hdr.ssize / 14;
+
+	alcSyms = calloc(numSyms, sizeof(*alcSyms));
+	if (alcSyms == NULL)
+	{
+		printf("Out of memory while processing %s\n", fname);
+		free(ptr);
+		return 1;
+	}
+
+	sptr = ptr + 0x1c + hdr.tsize + hdr.dsize + hdr.bsize;
+
+	for (i = 0, symStrLen = 0; i < numSyms; i++)
+	{
+		memcpy(alcSyms[i].name, sptr, 8);
+		alcSyms[i].type = GetWord(sptr + 8);
+		alcSyms[i].value = GetLong(sptr + 10);
+		symStrLen += strnlen((char *)alcSyms[i].name, 8) + 1;
+		sptr += 14;
+	}
+
+	aout = malloc(32 + /* header */
+		      hdr.tsize +
+		      hdr.dsize +
+		      hdr.bsize +
+		      numSyms * 12 + /* symbol table */
+		      4 + symStrLen + /* string table size + strings */
+		      4 /* NULL-terminator for file */);
+	if (aout == NULL)
+	{
+		printf("Out of memory while processing %s\n", fname);
+		free(alcSyms);
+		free(ptr);
+		return 1;
+	}
+
+	// Construct the header.
+	PutLong(aout, 0x00000107);             // Magic number
+
+	PutLong(aout+4, hdr.tsize);            // Text size
+	PutLong(aout+8, hdr.dsize);            // Data size
+	PutLong(aout+12, hdr.bsize);           // BSS size
+	PutLong(aout+16, numSyms * 12);        // Symbol table size
+	PutLong(aout+20, 0L);                  // Entry point
+
+	// XXX Transform "fixups" to these.
+	PutLong(aout+24, 0L);                  // TEXT relocation size
+	PutLong(aout+28, 0L);                  // DATA relocation size
+
+	// Copy the raw text, data, and bss segments
+	memcpy(aout + 32, ptr + 0x1c, hdr.tsize);
+	memcpy(aout + 32 + hdr.tsize, ptr + 0x1c + hdr.tsize, hdr.dsize);
+	memcpy(aout + 32 + hdr.tsize + hdr.dsize, ptr + 0x1c + hdr.tsize + hdr.dsize, hdr.bsize);
+
+	// Done with the Alcyon data.
+	free(ptr);
+	ptr = NULL;
+	sptr = NULL;
+
+	// Set saout to symbol table location
+	saout = aout + 32 + hdr.tsize + hdr.dsize + hdr.bsize;
+
+	// Set strPtr to string table location and write string table size
+	strPtr = saout + numSyms * 12;
+	PutLong(strPtr, 4 + symStrLen);
+	strOff = 4;
+
+	for (i = 0, strOff = 4; i < numSyms; i++)
+	{
+		PutLong(saout,    strOff);           // String offset of symbol
+		PutLong(saout+4,  SymTypeAlcToAout(alcSyms[i].type)); // Symbol type
+		// XXX May need to adjust the value for tex/data relocatable
+		// symbols.  From the man page here:
+		//
+		//   https://www.freebsd.org/cgi/man.cgi?query=a.out&apropos=0&sektion=0&manpath=NetBSD+1.4&format=html
+		//
+		// "The values for text and data symbols are not file offsets
+		// but addresses; to recover the file offsets, it is necessary
+		// to identify the loaded address of the beginning of the
+		// corresponding section and subtract it, then add the offset of
+		// the section."
+		PutLong(saout+8,  alcSyms[i].value); // Symbol value
+		saout += 12;
+
+		for (j = 0; j < 8 && alcSyms[i].name[j] != '\0'; j++)
+			*(strPtr + strOff + j) = alcSyms[i].name[j];
+		strOff += j;                         // Step past string
+		*(strPtr + strOff) = '\0';           // Terminate symbol string
+		strOff++;                            // Step past termination
+	}
+
+	PutLong(strPtr + strOff, 0L);          // Terminating long for object file
+
+	// Done with the Alcyon symbol table.
+	free(alcSyms);
+
+	// Now add this image to the list of pending ofiles (plist)
+	return AddToProcessingList(aout, fname, nullStr, 0, hdr.tsize, hdr.dsize, hdr.bsize);
+}
 
 //
 // What it says on the tin: check for a .o suffix on the passed in string
@@ -2531,6 +2704,13 @@ int ProcessFiles(void)
 				if (LoadObject(name[i], handle[i], 0L))
 					return 1;
 			}
+			// Look for Atari ST/TOS/GEMDOS (Alcyon) object files
+			else if (GetWord(magic) == 0x601A)
+			{
+				// Process Alcyon object file.
+				if (LoadAlcyon(name[i], handle[i]))
+					return 1;
+			}
 			// Otherwise, look for an object archive file
 			else if (strncmp(magic, "!<arch>\x0A", 8) == 0)
 			{
diff --git a/rln.h b/rln.h
index 75d6bb3..0cc218a 100644
--- a/rln.h
+++ b/rln.h
@@ -83,6 +83,46 @@
 #include <stdint.h>
 #include <dirent.h>
 
+/* Alcyon object file header structures.
+ *
+ * Same as an Atari ST/GEMDOS/TOS executable file.
+ *
+ * References:
+ *  http://cd.textfiles.com/ataricompendium/BOOK/HTML/CHAP2.HTM#processes
+ *  https://mikro.naprvyraz.sk/docs/GEM/GEMDOS.TXT
+ *
+ * Note the above disagree on the header layout.  In practice the files
+ * MADMAC seems to handle (at least, the gpucode.og file from the cinepak
+ * decoder) seem to use the header layout from the Atari Compendium page.
+ */
+struct ALCHEADER
+{
+	uint16_t magic;					// $601A
+	uint32_t tsize;					// text segment size
+	uint32_t dsize;					// data segment size
+	uint32_t bsize;					// BSS segment size
+	uint32_t ssize;					// symbol table size
+	uint32_t reserved0;				// unused
+	uint32_t reserved1;				// unused
+	uint16_t reserved2;				// unused/ABS flag
+};
+
+#define ALCSYM_DEFINED		0x8000
+#define ALCSYM_EQUATED		0x4000
+#define ALCSYM_GLOBAL		0x2000
+#define ALCSYM_EQUATED_REG	0x1000
+#define ALCSYM_EXTERN		0x0800
+#define ALCSYM_DRELOC		0x0400
+#define ALCSYM_TRELOC		0x0200
+#define ALCSYM_BRELOC		0x0100
+
+struct ALCSYM
+{
+	uint8_t name[8];				// fixed-size, padded with zeros.  NOT NUL-terminated!
+	uint16_t type;					// symbol type mask, from ALCSYM_* flags above.
+	uint32_t value;					// value
+};
+
 struct OHEADER
 {
 	uint32_t magic;					// $0107 for .o, $601B for .abs
-- 
2.17.1

